tweets_df
str(tweets_df)
str(tweets)
name = tweets[[1]]$getScreenName()
name
name = tweets[1]
nmae
name
tweets_df = twListToDF(tweets)
tweets_df$screenName[1]
# Create an empty character vector of the same length as the number of
# tweets
l <- length(tweets)
tweeter <- vector(mode = "character", length = l)
# Extract the screen names from each tweet status
for (i in 1:l) tweeter[i] <- tweets[[i]]$getScreenName()
# Compile the frequencies of each screen name
tweeter.freq <- table(tweeter)
View(tweeter.freq)
class(l)
l
for(i in m){sqrt(i)}
m
for(i in m){i*10}
m
m1 = for(i in m){i*10}
m1
for(i in m){m1 = i*10}
m1
for(i in m){m1[i] = i*10}
m1
?wordcloud()
?wordcloud
?names()
v = c("Peter", "Peter", "Klaus", "Stefan")
u = names(v)
u
u <- names(v)
u
names(v)
v
names(v)
class(v)
v[2]
names(v)
names(tweeter)
names(tweeter.freq)
paste(v,collapse = "OR")
paste(v,collapse = " OR ")
tweets <- searchTwitter("from: Calmund", n = 10)
tweets <- searchTwitter("from: @Calmund", n = 10)
tweets <- searchTwitter('from: @Calmund', n = 10)
tweets <- searchTwitter(from: @Calmund, n = 10)
tweets <- searchTwitter(from: Calmund, n = 10)
v = c("#schön", "#reich", "#berühmt", "#prominent")
parsev = parse(v, collapse = " OR ")
pastev = paste(v,collapse = " OR ")
tweets = searchTwitter(pastev,n=10, lang = "de")
tweets_df = twListToDF(tweets)
View(tweets_df$text)
paste(v "-filter: retweets")
paste("v -filter: retweets")
paste(v + "-filter: retweets")
paste(v AND "-filter: retweets")
paste(pastev "-filter: retweets")
paste(pastev -filter: retweets)
paste("pastev -filter: retweets")
paste(pastev AND "-filter: retweets")
paste(pastev , "-filter: retweets")
hashtags = paste(pastev , "-filter: retweets")
tweets = searchTwitter(hashtags, n = 100, lang = "de")
install.packages(wordcloud)
library(wordcloud)
install.packages("wordcloud")
library(wordcloud)
?wordcloud
install.packages("stringr")
library(stringr)
?str_extract_all
tweets_df = twListToDF(tweets)
View(tweets_df$text[1])
l = length()
l = length(tweets)
hasht = vector(mode = "character", length = l)
for(i in 1:l){hasht[i] <- str_extract_all(tweets_df$text[i],"#\\S+")}
View(hasht)
hasht.freq <- table(hasht)
class(hasht)
hasht_df = twListToDF(hasht)
hasht
paste(hasht, collapse = " ")
unlist(hasht)
sapply(hasht,function(x) paste(unlist(hasht),collapse=""))
hasht[[2]]
test = sapply(hasht,function(x) paste(unlist(hasht),collapse=""))
class(test)
mode(test)
test.table = table(test)
View(test.table)
names(test.table)
test2 = unlist(hasht)
class(test2[1])
test2[1]
test2[2]
table(test2)
View(table(test2))
par(bg = "black")
test2.table = table(test2)
wordcloud(names(test2.table),test2.table,min.freq = 4,random.color = TRUE)
wordcloud(names(test2.table),test2.table,min.freq = 4,colors = c("tomato",
"wheat", "lightblue"), scale = c(6, 0.5), random.color = TRUE, rot.per = 0.5,
font = 2, family = "serif")
wordcloud(names(test2.table),test2.table,min.freq = 4,colors = c("tomato",
"wheat", "lightblue"), scale = c(2, 0.5), random.color = TRUE, rot.per = 0.5,
font = 2, family = "serif")
wordcloud(names(test2.table),test2.table,min.freq = 4,colors = c("tomato",
"wheat", "lightblue"), scale = c(4, 0.5), random.color = TRUE, rot.per = 0.5,
font = 2, family = "serif")
vectos
class(vectos)
write.csv(vectos,"mytestdata")
convChrVecToString <- function(x, retweets = FALSE){
if(!retweets){}
}
View(convChrVecToString)
View(convChrVecToString)
rm(convChrVecToString)
> convChrVecToString <- function(x, retweets = FALSE){
+     if(!retweets){
pastex <- paste(x,"-filter: retweets",collapse = " OR ")
}
else{
pastex <-  paste(x,collapse = " OR ")
}
return(pastex)
+ }
> convChrVecToString <- function(x, retweets = FALSE){
+     if(!retweets){
pastex = paste(x,"-filter: retweets",collapse = " OR ")
}
else{
pastex =  paste(x,collapse = " OR ")
}
return(pastex)
+ }
convChrVecToString <- function(x, retweets = FALSE){
+     if(!retweets){
pastex = paste(x,"-filter: retweets",collapse = " OR ")
}
else{
pastex =  paste(x,collapse = " OR ")
}
return(pastex)
+ }
convChrVecToString <- function(x, retweets = FALSE){
if(!retweets){
pastex = paste(x,"-filter: retweets",collapse = " OR ")
}
else{
pastex =  paste(x,collapse = " OR ")
}
return(pastex)
}
view(v)
View(v)
testConvChr = convChrVecToString(v)
View(testConvChr)
convChrVecToString <- function(x, retweets = FALSE){
if(!retweets){
pastex = paste(x,collapse = " OR ")
pastex = paste(pastex,"-filter: retweets", collapse = " OR ")
}
else{
pastex =  paste(x,collapse = " OR ")
}
return(pastex)
}
testConvChr <- convChrVecToString(v)
testConvChr
testConvChr <- convChrVecToString(v,retweets = TRUE)
testConvChr
users1
users
class(users)
mode(users)
View(connectTweetApi)
View(connectTweetApi)
library(twitteR)
getTweets <- function(hashtagvec, nTweets = 25, lang = "en"){
connectTweetApi()
statusupdates = searchTwitter(searchString = hashtagvec,n = nTweets, lang = lang)
return(statusupdates)
}
View(getTweets)
getTweets <- function(hashtagvec, nTweets = 25, lang = "en", retweets = FALSE){
convChrVecToString(hashtagvec,retweets = retweets)
connectTweetApi()
statusupdates = searchTwitter(searchString = hashtagvec,n = nTweets, lang = lang)
return(statusupdates)
}
tweets = getTweets(v)
tweets
tweets <- getTweets(v,lang = "de")
tweets
hashtags = convChrVecToString(v, retweets = FALSE)
hashtags
tweets = searchTwitter(hashtags,n = 10, lang = "de")
tweets
sap <- sapply(tweets, function(z) z$getText())
sap
sap <- sapply(tweets,function(y) x$getText())
class(sap)
mode(sap)
sap[1]
sap[[2]]
tweets = getTweets("#Bayern", lang = "de")
sap <- sapply(tweets, function(x) x$getText())
sap
tweets = getTweets("#Bayern",lang = "de",retweets = TRUE )
sap = sapply(tweets, function(x) x$getText())
sap
sap <- sapply(tweets, function(x) x$getCreated())
sap
?status-`status-class`
?status- class
View(getTweets())
View(getTweets)
function(hashtagvec, nTweets = 25, lang = "en", retweets = FALSE){
hashtagString <- convChrVecToString(hashtagvec,retweets = retweets)
connectTweetApi()
statusupdates = searchTwitter(searchString = hashtagString,n = nTweets, lang = lang)
return(statusupdates)
}
getTweets <- function(hashtagvec, nTweets = 25, lang = "en", retweets = FALSE){
hashtagString <- convChrVecToString(hashtagvec,retweets = retweets)
connectTweetApi()
statusupdates = searchTwitter(searchString = hashtagString,n = nTweets, lang = lang)
return(statusupdates)
}
View(getTweets)
v
plot(v)
View(v)
tweets <- getTweets(v,lang = "de")
sap <- sapply(tweets, function(x) x$getText())
sap
library(str)
library(stringr)
iconv(sap,"latin1","ASCII", sub="")
?regex
?gsub
clean_tweet = gsub("@\\w+", "", sap)
clean_tweet
library(stringr)
clean_tweet = gsub("?@\\w+", "", clean_tweet)
clean_tweet
clean_tweet = gsub("[[:punct:]]","", clean_tweet)
clean_tweet
str(tweets)
clean_tweet
tweets <- getTweets(v,nTweets = 5, lang = "de")
tweets_df = twListToDF(tweets)
tweets_df
textTwitter = sapply(tweets,function(x) x$getText())
textTwitter
install.packages(rtweet)
install.packages(rtweet)
install.packages("rtweet")
library(rtweet)
library("rtweet")
tweetsRtweet = search_tweets(testConvChr,include_rts = FALSE)
connectTweetApi()
tweetsRtweet = search_tweets(testConvChr,include_rts = FALSE)
?rtweet
?`rtweet-package`
app <- "University of Regensburg"
create_token(app = app,consumer_key = ApiKey,consumer_secret = ApiSecretKey,access_token = AccessToken,access_secret = AccessTokenSecret)
tweetsRtweet = search_tweets(testConvChr,n=5,include_rts = FALSE)
class(tweetsRtweet)
View(table(tweetsRtweet$screen_name))
tweetsRtweet = search_tweets(testConvChr,n=100,include_rts = FALSE)
tweetsRtweet = search_tweets(testConvChr,n=1000,include_rts = FALSE)
View(table(tweetsRtweet$screen_name))
tweetsRtweet = search_tweets(testConvChr,n=10,include_rts = FALSE)
tweetsRtweet$text
plain_tweets(tweetsRtweet$text)
tweetsRtweet = search_tweets(testConvChr,n=1000,include_rts = FALSE, lang = "de")
tweetsRtweet$text[1]
library("wordloud")
library("wordcloud")
RTHashtags = str_extract_all(tweetsRtweet$text,"#\\S+")
RTHashtags = unlist(RTHashtags)
View(table(RTHashtags))
wordcloud(names(table(RTHashtags)),table(RTHashtags), min.freq = 4)
wordcloud(names(table(RTHashtags)),table(RTHashtags), min.freq = 4,scale = c(3,0.5))
i <- tweetsRtweet$text
View(i)
View(unique(i))
library(rtweet )
warnings()
library(rtweet)
tweetsRtweet <- search_tweets(#Regensburg,n=10, lang = "de")
tweetsRtweet <- search_tweets(#Regensburg,n=10, lang = "de")
tweetsRtweet <- search_tweets("#Regensburg",n=10, lang = "de")
<
<
tweetsRtweet = search_tweets("#Regensburg", n=5, lang = "de")
tweetsRtweet$text
tweesUnique <- unique.data.frame(tweetsRtweet$text)
tweesUnique <- unique(tweetsRtweet$text)
tweesUnique
tweetsRtweet = search_tweets("#Regensburg", n=5, lang = "de",include_rts = FALSE)
tweetsRtweet$text
tweetsRtweet$text <- gsub("&amp", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "",
tweetsRtweet$text)
tweetsRtweet$text <- gsub("@\\w+", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("[[:punct:]]", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("[[:digit:]]", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("http\\w+", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("[ \t]{2,}", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("^\\s+|\\s+$", "", tweetsRtweet$text)
tweetsRtweet$text <- gsub("\n", "", tweetsRtweet$text)
tweetsRtweet$text
cleanTweets <- function(text){
text <- gsub("&amp", "", text)
text <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", text)
text <- gsub("@\\w+", "", text)
text <- gsub("[[:punct:]]", "", text)
#text <- gsub("[[:digit:]]", "", text)
text <- gsub("http\\w+", "", text)
text <- gsub("[ \t]{2,}", "", text)
text <- gsub("^\\s+|\\s+$", "",text)
text <- gsub("\n", "", text)
}
tweetsRtweet = search_tweets("#Regensburg", n=15, lang = "de",include_rts = FALSE)
View(tweetsRtweet)
View(tweetsRtweet$text)
tweetsRtweet$text
View(cleanTweets)
cleanTweets <- function(text){
text <- gsub("&amp", "", text)
text <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", text)
text <- gsub("@\\w+", "", text)
text <- gsub("[[:punct:]]", "", text)
#text <- gsub("[[:digit:]]", "", text)
text <- gsub("http\\w+", "", text)
text <- gsub("[ \t]{2,}", "", text)
text <- gsub("^\\s+|\\s+$", "",text)
return(text)
}
View(cleanTweets)
tweetsRtweet$text
cleanTweets(tweetsRtweet$text)
View(cleanTweets)
View(cleanTweets)
cleanTweets <- function(text){
iconv(text,"latin1", "ASCII", sub = "")
text <- gsub("&amp", "", text)
text <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", text)
text <- gsub("@\\w+", "", text)
text <- gsub("[[:punct:]]", "", text)
#text <- gsub("[[:digit:]]", "", text)
text <- gsub("http\\w+", "", text)
text <- gsub("[ \t]{2,}", "", text)
text <- gsub("^\\s+|\\s+$", "",text)
text <- gsub("\\n", " ", text)
return(text)
}
tweetsRtweet$text
cleanTweets(tweetsRtweet$text)
View(cleanTweets)
View(cleanTweets)
cleanTweets <- function(text){
text <- iconv(text,"latin1", "ASCII", sub = "")
text <- gsub("&amp", "", text)
text <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", text)
text <- gsub("@\\w+", "", text)
#text <- gsub("[[:punct:]]", "", text)
#text <- gsub("[[:digit:]]", "", text)
text <- gsub("http\\w+", "", text)
text <- gsub("[ \t]{2,}", "", text)
text <- gsub("^\\s+|\\s+$", "",text)
text <- gsub("\\n", " ", text)
return(text)
}
tweetsRtweet$text
cleanTweets(tweetsRtweet$text)
View(cleanTweets)
View(cleanTweets)
View(cleanTweets)
View(cleanTweets)
View(cleanTweets)
cleanTweets <- function(text){
text <- iconv(text,"latin1", "ASCII", sub = "")
text <- gsub("&amp", "", text)
text <- gsub("(RT|via)((?:\\b\\W*@\\w+)+)", "", text)
text <- gsub("@\\w+", "", text)
text <- gsub("[[:punct:]]", "", text)
#text <- gsub("[[:digit:]]", "", text)
text <- gsub("http\\w+", "", text)
text <- gsub("[ \t]{2,}", "", text)
text <- gsub("^\\s+|\\s+$", "",text)
text <- gsub("\\n", " ", text)
return(text)
}
cleanTweets(tweetsRtweet$text)
?write.csv
write.csv(cleanTweets(tweetsRtweet,file = "AusgabeTweets"))
write.csv(cleanTweets(tweetsRtweet),file = "AusgabeTweets")
write.csv(cleanTweets(tweetsRtweet$text),file = "AusgabeTweets")
View(convChrVecToString)
View(getTweets)
View(getTweets)
?search_tweets
View(cleanTweets)
}
getTweets <- function(hashtgs, nTweets = 25, lang = "de", retweets = FALSE){
hashtags <- paste(hashtgs,collapse = " OR ")
connectTweetApi()
statusupdates = search_tweets(hashtgs,nTweets,include_rts = retweets,lang = lang)
return(statusupdates)
}
connectTweetApi <- function(){
library("rtweet")
create_token(app = app, consumer_key = ApiKey, consumer_secret = ApiSecretKey,access_token = AccessToken, access_secret = AccessTokenSecret)
}
g <- getTweets("#Regensburg")
g$text
extractText <- function(tweetdf, cleanText = TRUE){
tweetsTxt <- tweetdf$text
if(cleanText){
tweetsTxt <- cleanTweets(tweetsTxt)
}
return(tweetsTxt)
}
rm(convChrVecToString)
g <- getTweets("#Regensburg",nTweets = 5)
g
g$text
extractText(g)
View(extractText)
View(extractText)
extractText <- function(tweetdf, cleanText = TRUE, exportCSV = FALSE){
tweetsTxt <- tweetdf$text
if(cleanText){
tweetsTxt <- cleanTweets(tweetsTxt)
}
if(exportCSV){
write.csv(tweetsTxt,file = "Tweets")
}
return(tweetsTxt)
}
g$text
extractText(g,exportCSV = TRUE)
hashtags <- c("#schön", "#prominent","#adelig")
g <- getTweets(hashtags,nTweets = 200)
hashtags
paste(hashtags, collapse = " OR ")
g <- getTweets(hashtags)
q <- search_tweets("#schön OR #prominent OR #adelig", include_rts = FALSE)
View(getTweets)
getTweets <- function(hashtgs, nTweets = 25, lang = "de", retweets = FALSE){
hashtags <- paste(hashtgs,collapse = " OR ")
connectTweetApi()
statusupdates = search_tweets(hashtags,nTweets,include_rts = retweets,lang = lang)
return(statusupdates)
}
hashtags
g <- getTweets(hashtags,nTweets = 250)
str(g)
extractHashtags <- function(tweetdf, wordcloud = TRUE){
library(stringr)
tweetdf <- tweetdf$text
hashvector <- unlist(str_extract_all(tweetdf, "#\\S+"))
if(wordcloud){
library(wordcloud)
wordcloud(names(table(hashvector)),table(hashvector),scale = c(3,.5))
}
return(hashvector)
}
extractHashtags(g)
class(extractHashtags(g))
extractHashtags(g)[1]
hashtags <- c("#M05VFB")
hashtags < "#m05vfb"
hashtags <- "#m05vfb"
tweets <- getTweets(hashtags)
textTwitter <- extractText(tweets,exportCSV = TRUE)
textTwitter
rm(clean_tweet)
rm(firstext,hello,i,l,m1,pastev,RTHashtags,sap,test,test.table,test2,test2.table,testConvChr,tweesUnique)
rm(tweeter,tweeter.freq,u,users,users1,v,vectos)
rm(g,hasht)
rm(lst,m,name,q,tweets_df,tweetsRtweet)
tweets
require(ggplot2)
require(MBESS)
require(pwr)
require(meta)
require(metafor)
require(moments)
require(psych)
require(BayesFactor)
require(car)
require(fGarch)
require(effsize)
require(readr)
require(parallel)
require(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
